#!/usr/bin/env superdoit_stone
options
{
  SuperDoitOptionalOptionWithNoArg long: 'changes' short: 'c'.
  SuperDoitOptionalOptionWithNoArg long: 'list' short: 'l'.
  SuperDoitOptionalOptionWithNoArg long: 'modified' short: 'm'.
  SuperDoitOptionalOptionWithNoArg long: 'repositories'.
}
%
# Example options section
#
#options
#{
#	SuperDoitOptionalOptionWithNoArg long: 'noarg'.
#	SuperDoitOptionalOptionWithNoArg long: 'noarg' short: 'n'.
#
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' default: 'default'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' short: 'o'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' short: 'o' default: 'default'.
#
#	SuperDoitRequiredOptionWithRequiredArg long: 'required'.
#	SuperDoitRequiredOptionWithRequiredArg long: 'required' short: 'r'.
#}
#%
#
usage
-----
USAGE 
  # with GS_HOME set (<stone-name> optional if run in $GS_HOME/servers/stones/<stone-name> directory)
  $basename [--help | -h] [--debug | -D]  [--debugGem] [-- [<stone-name> [<topaz-command-line-args>] ] ]
  # with GEMSTONE set
  $basename [--help | -h] [--debug | -D]  [--debugGem] -- (-r | -l | -L) -I <path-to-.topazini> [<topaz-command-line-args>]

DESCRIPTION
  <put your description here>

OPTIONS
  <stone-name>               Name of the GsDevKit_home stone. <stone-name> argument
                             may be skipped if the script is run in a GsDevKit_home
                             stone directory (i.e., $GS_HOME/server/stones/<stone-name>
  <topaz-command-line-args>  topaz options that should be passed to topaz when running
                             running the script
  -h, --help                 display usage message
  -D, --debug                bring up topaz debugger in the event of a script error
  --debugGem                 If terminal is connected to stdout, bring up debugger. If not,
                             dump stack to stdout and wait for topaz to attach using topaz
                             DEBUGGEM command.
  -c, --changes              Dispaly the changes for the modified Monticello packages in the image
  -l, --list                 List the Monticello packages in the image
  -m, --modified             List the modified Monticello packages in image
  --repositories         List the repositories in the image

EXAMPLES
  $basename --help                           -- gs_351             # with GS_HOME set
  $basename -h                               -- -l -I ./.topazini  # with GEMSTONE set
  $basename -D <script-arguments>            <topaz-arguments>
  $basename --debugGem <script-arguments>    <topaz-arguments>
  $basename --list -- -I ./.topazini			# DataCurator login
  $basename --modified -- -I ./.topazini	# DataCurator login
  $basename --changes -- -I ./.topazini	# DataCurator login
  # in directory containing a .topazini
  $basename --list                        # DataCurator login
  $basename --modified                    # DataCurator login
  $basename --change                      # DataCurator login
-----
%
method
modifiedPackages
	"return a modified Monticello packages in the image"
	^ MCWorkingCopy allManagers select: [:wc | wc modified ]
%
method
modifiedPackageNames
	"return a list of the modified Monticello package names in the image"
	^ (self modifiedPackages collect: [:wc | wc packageName ]) sort.
%
method
packageNames
	"return a list of the loaded Monticello package names in the image"
	^ (MCWorkingCopy allManagers collect: [:wc | wc packageName ]) sort.
%
method
listNames: names
	names do: [:name | 	self stdout nextPutAll: name; lf ]
%
method
listPackageNames
	self listNames: self packageNames.
	^ self noResult
%
method
listModifiedPackageNames
	self listNames: self modifiedPackageNames.
	^ self noResult
%
method
showChanges
	self modifiedPackages do: [:wc |
		| patch |
		patch := wc changesRelativeToRepository: wc repositoryGroup repositories first.
		self stdout nextPutAll: wc packageName; lf.
		patch operations asArray sort do: [:op |
			self stdout tab; nextPutAll: op sourceString; lf ].
 ].
	^ self noResult
%
method
listRepositories
	| packageRepos descriptions |
	packageRepos := Set new.
	descriptions := Set new.
	(Rowan globalNamed: 'MCWorkingCopy') allManagers do: [:wc |
		packageRepos addAll: wc repositoryGroup repositories ].
	packageRepos do: [:repos | descriptions add: repos description ].
	descriptions asArray sort
		do: [:repositoryDescription | 
			self stdout tab; nextPutAll: repositoryDescription; lf ].
	^self noResult
%
doit
	self repositories ifTrue: [ ^ self listRepositories ].
	self list ifTrue: [ ^ self listPackageNames ].
	self modified ifTrue: [ ^ self listModifiedPackageNames ].
	self changes ifTrue: [ ^ self showChanges ].
	^ 'no command selected'
%
